1) Find missing parenthesis in a given expression â€“ 2 * ( 3 + 5(sasdfasdfasd)
Answer:
{

        public static Boolean isMatchingPair(char char1, char char2) {
            if (char1 == '(' && char2 == ')') {
                return true;
            }
            else if (char1 == '{' && char2 == '}')
			{
				return true;
			}
			else if (char1 == '[' && char2 == ']')
			{
				return true;
			}
            else {
                return false;
            }
        }

        public static void findMissingParenthesis(char[] mathExp) {
            Stack myStack = new Stack();

            for (int i = 0; i < mathExp.Length; i++)
            {
                if (mathExp[i] == '(' || mathExp[i] == '{' || mathExp[i] == '[') {
                    myStack.Push(mathExp[i]);
                }
                if (mathExp[i] == ')' || mathExp[i] == '}' || mathExp[i] == ']') {
                    if (myStack.Count == 0) {
                        Console.WriteLine(mathExp[i]);
                    }

                    else if(!isMatchingPair((char)myStack.Pop(), mathExp[i]))
                    {
                        Console.WriteLine(mathExp[i]);

                    }
				}
            }
            if (myStack.Count == 0) {
                Console.WriteLine("Balanced");
            }
            else {
                Console.WriteLine("Missing close bracket for " + myStack.Pop());
            }
        }

        public static void Main(string[] args)
        {
            String exp = "-2 * (3 + 5(dadasdsa)";
            char[] mathExp = exp.ToCharArray();
            findMissingParenthesis(mathExp);
        }
    }

2) Evaluate an expression given only single digits and only 2 operators * and +.
Answer: 
{

        public static int eval(char[] exp)
        {
            int temp;
            Stack<int> myStack = new Stack<int>();
            for (int i = 0; i < exp.Length; i++)
            {
                temp = 0;
                if (exp[i] >= '0' && exp[i] <= '9')
                {
                    myStack.Push(exp[i] - '0');
                }
                else if (exp[i] == '*')
                {
                    temp = myStack.Pop() * (exp[i + 1] - '0');
                    myStack.Push(temp);
                    i++;
                }
            }
 
            return myStack.Sum();
        }

        public static void Main(string[] args)
        {
            String exp = "2 * 3 + 4 * @@@@5";
            char[] mathExp = exp.Where(c => Regex.IsMatch(c.ToString(), @"[\d*+]")).ToArray();
            int result = eval(mathExp);
            Console.WriteLine($"{exp} = {result}");
        }
    }

3) Reverse a stack and put the reversed value back in the same stack. You can use only one other stack and a temp variable.
Answer: 

