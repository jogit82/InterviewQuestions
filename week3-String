Question 1-Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
Answer:
public static Boolean uniqueChar(string s) 
    {
        char[] c = s.ToCharArray();

        Array.Sort(c);

        for (int i = 0;i < c.Length-1;i++)
        {
            if(c[i]!=c[i+1])
                continue;
            else
                return false;
        }
        return true;
    }

Question 2-Given two strings, write a method to decide if one is a permutation of the other?
Answer:
public static Boolean arePermutations(string s1, string s2)
{
    if(s1.Length != s2.Length)
    {
        return false;
    }

    Dictionary<char, int> dict = new Dictionary<char, int>();
    int count = 0;
    foreach(char c in s1)
    {
        if(dict.ContainsKey(c))
        {
            dict.TryGetValue(c, out count);
            dict[c] = count + 1;
        }
        else
        {
            dict.Add(c, 1);
        }
    }

    foreach(char c in s2)
    {
        if(dict.ContainsKey(c))
        {
            dict.TryGetValue(c, out count);
            count--;
            if(count < 0)
            {
                return false;
            }
            dict[c] = count;
        }
        else
        {
            return false;
        }
    }

    return true;
}

Question 3-Write a method to replace all spaces in a string with ‘%20’.
Assumptions: the string has sufficient space at the end to hold additional characters and given the true length of the string
Answer:
public static void replaceString(string st)
{
    char[] s = st.ToCharArray();
    int numOfSpaces = 0;
    int i;
    for (i = 0; i < s.Length; i++)
    {
        if (s[i] == ' ')
        {
            numOfSpaces++;
        }
    }

    while(s[i-1] == ' ')
    {
        numOfSpaces--;
        i--;
    }

    int neededLength = i + numOfSpaces * 2;
    if(neededLength > s.Length + 1)
    {
        Console.Write("New string is longer than given string");
        return;
    }

    int index = neededLength - 1; // fill from the back
    for (int j = i - 1; j >= 0;j--)
    {
        if(s[j]==' ')
        {
            s[index] = '0';
            s[index-1] = '2';
            s[index-2] = '%';
            index = index - 3;
        }
        else
        {
            s[index] = s[j];
            index--;
        }
    }

    foreach(char c in s) 
    {
        Console.Write(c);
    }
    
}

Question 4-Implement a method to perform a basic string compression using the counts of repeated characters. For example, the string aabccccaaa would become a2b1c4a3. If the compressed string would not become smaller than the original string, your method should return the original string.
Answer:
public static void Main(string[] args)
{
    string s = "bbbb";
    StringBuilder sb = new StringBuilder();
    char temp = ' ';
    int count = 0;
    for(int i = 0; i <= s.Length;i++)
    {
        if(i == 0){
            temp = s[i];
            count ++;
        }

        else if(i == s.Length)
        {
            sb.Append(temp);
            sb.Append(count);
        }

        else
        {
            if (s[i] == s[i - 1])
            {
                count++;
            }
            else
            {
                sb.Append(temp);
                sb.Append(count);

                count = 1;
                temp = s[i];
            }
        }
    }

    if(sb.Length < s.Length)
        Console.WriteLine(sb);
    else
        Console.WriteLine(s);

}

Question 5-Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.
Answer:
public static void setZeroes(int[,] mat)
{
    int x = mat.GetLength(1); // num of cols
    if (x == 0) return;
    int y = mat.GetLength(0); // num of rows

    bool firstRow = scanRow(mat, 0);
    bool firstCol = scanCol(mat, 0);

    for (int i = 1; i < x; i++) 
    {
        if(scanRow(mat, i) == true)
        {
            mat[i, 0] = 0;
        }
    }

    for (int i = 1; i < y; i++)
    {
        if(scanCol(mat, i) == true) 
        {
            mat[0, i] = 0;
        }
    }

    for (int i = 1; i < x; i++)
    {
        for (int j = 1; j < y;j++)
        {
            if(mat[i, 0] == 0 || mat[0, j] == 0)
            {
                mat[i, j] = 0;
            }
        }
    }

    if (firstRow == true) 
    {
        for (int i = 0; i < x; i++)
        {
            mat[0, i] = 0;
        }
    }

    if (firstCol == true)
    {
        for (int i = 0; i < x; i++)
        {
            mat[i, 0] = 0;
        }
    }

    Console.WriteLine("Converted Matrix:");
    printMatrix(mat);
}

public static void printMatrix(int[,] matrix)
{
    
    int rowLength = matrix.GetLength(0);
    int colLength = matrix.GetLength(1);

    for (int i = 0; i < rowLength; i++)
    {
        for (int j = 0; j < colLength; j++)
        {
            Console.Write(string.Format("{0} ", matrix[i, j]));
        }
        Console.Write(Environment.NewLine + Environment.NewLine);
    }
}

public static bool scanRow(int[,] matrix, int rowNumber)
{
    for(int i = 0; i < matrix.GetLength(0); i++)
    {
        if(matrix[rowNumber, i] == 0)
        {
            return true;
        }
    }
    return false;
}

public static Boolean scanCol(int[,] matrix, int colNumber)
{
    for (int i = 0; i < matrix.GetLength(1); i++)
    {
        if (matrix[i, colNumber] == 0)
        {
            return true;
        }
    }
    return false;
}

Question 6-Given two sequences, print longest common subsequence
LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.
Answer:
public static void printLCS(string s1, string s2) 
{
    int m = s1.Length;
    int n = s2.Length;
    // make a new matrix with one extra row and column
    int[,] matrix = new int[m+1, n+1];

    // filling in the blanks!
    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            // fill first row and first column with zeros
            if(i==0 || j==0)
            {
                matrix[i, j] = 0;
            }
            else if(s1[i-1] == s2[j-1])
            {
                matrix[i, j] = matrix[i - 1, j - 1] + 1;
            }
            else
            {
                matrix[i, j] = Math.Max(matrix[i - 1, j], matrix[i, j - 1]);
            }
        }
    }

    // Length of LCS is matrix[m,n]
    printMatrix(matrix);

    // Now we backtrack(dynamic programming) to print the LCS
    // Starting with bottom right corner(matrix[m,n]
    int index = matrix[m, n];
    int x = m, y = n;
    int temp = index; // length of the LCS

    // Array to keep the LCS string, with an extra element as terminating character
    char[] lcs = new char[index + 1];
    lcs[index] = '\0';

    while(x>0 && y>0) // stops before index hit row 0 or column 0
    {
        // print if current chars are the same
        if(s1[x-1] == s2[y-1])
        {
            lcs[index - 1] = s1[x - 1];
            x--;
            y--;
            index--;
        }

        // if current chars not the same, we pick the max value of the two and index move to the larger value
        else if(matrix[x-1,y] > matrix[x, y-1]) // left value is larger than top value, go to left, but don't print
        {
            x--;
        }
        else 
        {
            y--;
        }
    }

    // Print the LCS
    for (int k = 0; k <= temp;k++)
    {
        Console.Write(lcs[k]);
    }
}

Question 7-Given two string str1 and str2, find the shortest string that has both str1 and str2 as subsequences.
Examples:
Input: str1="aggtab", str="gxtxayb"
Output: "agxgtxayb"
Answer:
Using the LCS algorithm in Q6 to acquire lcs, I then compare str1-str2-lcs using the following algorithm
public static void shortestSubsequence(string s1, string s2, char[] s3)
{
    int i = 0, j = 0, k = 0;
    while (i<s1.Length)
    {
        if (s1[i] != s2[j] || s1[i] != s3[k])
        {
            if (s1[i] == s2[j])
            {
                Console.Write(s3[k]);
                k++;
            }
            else if (s1[i] == s3[k])
            {
                Console.Write(s2[j]);
                j++;
            }
            else
            {
                Console.Write(s1[i]);
                i++;
            }
        }
        else
        {
            Console.Write(s1[i]);
            i++;
            j++;
            k++;
        }
    }
}


Question 8-Remove spaces from a given string in O9n) running time and only one traversal of a string
Input: "I love ice cream"
Output:"Iloveicecream"
Answer:
public static void removeSpaces(string s1)
{
    char[] s = s1.ToCharArray();
    int k = 0;
    for (int i = 0; i < s.Length;i++)
    {
        if(s[i]!=' ')
        {
            if(s[k]==' ')
            {
                s[k] = s[i];
                s[i] = ' ';
                k++;
            }
            else
            {
                i++;
                k++;
            }
        }
        else if(s[i+1] == ' ')
        {
            i++;
        }
        else
        {
            s[k] = s[i + 1];
            s[i + 1] = ' ';
            i++;
            k++;
        }
    }
    string s2 = s.ToString();
    s2.Trim();
    Console.Write(s2);
}
